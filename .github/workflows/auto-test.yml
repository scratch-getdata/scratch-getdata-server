name: Auto Test

on:
  push:
    branches:
      - autoreplit
      - stable
  pull_request:
    branches:
      - autoreplit
      - stable

jobs:
  test:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v2

    - name: Set up Python
      uses: actions/setup-python@v2
      with:
        python-version: 3.x

    - name: Install dependencies
      env:
        DATABASE_ENCRYPTION_KEY: ${{ secrets.DATABASE_ENCRYPTION_KEY }}
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt

    - name: Start Flask App
      env:
        DATABASE_ENCRYPTION_KEY: ${{ secrets.DATABASE_ENCRYPTION_KEY }}
        debug: True
        no_warning: false
      run: |
        python -c "from main import app; app.run(host='0.0.0.0', port=8080, debug=$debug, use_reloader=False, threaded=True, allow_unsafe_werkzeug=True)" &

    - name: Wait for Flask to start
      run: sleep 4

    - name: Test Flask App
      run: |
        curl -s -o /dev/null -w "%{http_code}" http://localhost:8080

    - name: Stop Flask App
      run: |
        pkill -f "python main.py"

    - name: Check test result
      id: test_result
      run: echo "::set-output name=status::$(if [ ${{steps.test.stdout}} -eq 200 ]; then echo 'success'; else echo 'failure'; fi)"

    - name: Set GitHub status
      uses: actions/github-script@v4
      with:
        github-token: ${{secrets.GITHUB_TOKEN}}
        script: |
          const status = '${{ steps.test_result.outputs.status }}';
          if (status === 'success') {
            github.checks.create({
              owner: context.repo.owner,
              repo: context.repo.repo,
              name: 'Test Flask App',
              head_sha: context.sha,
              status: 'completed',
              conclusion: 'success',
              output: {
                title: 'Test Result',
                summary: 'Tests passed successfully.',
              }
            });
          } else {
            github.checks.create({
              owner: context.repo.owner,
              repo: context.repo.repo,
              name: 'Test Flask App',
              head_sha: context.sha,
              status: 'completed',
              conclusion: 'failure',
              output: {
                title: 'Test Result',
                summary: 'Tests failed.',
              }
            });
          }
